<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Lin&#39; 博客</title>
    <link>https://gaol.github.io/zh-cn/categories/notes/</link>
    <description>Recent content in notes on Lin&#39; 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 01 Jul 2021 17:12:06 +0800</lastBuildDate>
    
	<atom:link href="https://gaol.github.io/zh-cn/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WildFly Http Client</title>
      <link>https://gaol.github.io/zh-cn/posts/wildfly_http_client/</link>
      <pubDate>Thu, 01 Jul 2021 17:12:06 +0800</pubDate>
      
      <guid>https://gaol.github.io/zh-cn/posts/wildfly_http_client/</guid>
      <description>Table of Contents 服务器端配置 客户端代码以及配置 服务器端认证配置     WildFly Http Client 是 WildFly / JBoss EAP 中通过 HTTP transport 的方式调用远程 server 端服务的组件。它包含：
   wildfly-http-ejb-client # for remote EJB call
  wildfly-http-naming-client # for remote JNDI call
  wildfly-http-transaction-client # for remote transaction call
   默认通过 http://localhost:8080/wildfly-services 的接口调用。
   服务器端配置 服务器端需要保证 undertow subsystem 下的 http-invoker`配置好，检查 `standalone.xml：
 &amp;lt;subsystem xmlns=&#34;urn:jboss:domain:undertow:12.0&#34; default-server=&#34;default-server&#34; default-virtual-host=&#34;default-host&#34; d efault-servlet-container=&#34;</description>
    </item>
    
    <item>
      <title>Python Notes</title>
      <link>https://gaol.github.io/zh-cn/posts/python-notes/</link>
      <pubDate>Mon, 14 Sep 2020 10:12:06 +0800</pubDate>
      
      <guid>https://gaol.github.io/zh-cn/posts/python-notes/</guid>
      <description>Table of Contents 配置 Python3 与 Python2.7 并存 使用 Anaconda 管理开发环境     本文列出一些 Python 相关的 notes，尽量不停的更新：
   配置 Python3 与 Python2.7 并存 虽然 Python 已经到了 3 的时代， Python2.7 还是有很多的用户和类库。很多时候我们会需要用到不同版本的 Python。
 使用 Anaconda 管理开发环境   从 Anaconda 官网 下载安装 Anaconda Individual Version.
  安装 Python 环境
   conda create --name python27 python=2.7 conda create --name python3 python=3.7     激活你想使用的 Python 环境</description>
    </item>
    
    <item>
      <title>Github two-factor 认证</title>
      <link>https://gaol.github.io/zh-cn/posts/github-authentication/</link>
      <pubDate>Wed, 25 Mar 2020 17:12:06 +0800</pubDate>
      
      <guid>https://gaol.github.io/zh-cn/posts/github-authentication/</guid>
      <description>笔者认为 Two-Factor（2FA） 认证是目前最为安全的认证方法。 Github 和 Google 都提供了这两种方式的登录和认证。 Github 提供的是 Time-based One Time Password(TOTP) 类型的 2FA。
 当打开 Github 的 2FA, 客户端就不再支持通过 Username + Password 的方式进行 pull 和 push.
 需要以下两种方法解决：
   设置 git remote 为 ssh 方式， 如：
   (base) [lgao@lgao gaol.github.io]$ git remote add fork git@github.com:gaol/gaol.github.io.git (base) [lgao@lgao gaol.github.io]$ git remote -v fork	git@github.com:gaol/gaol.github.io.git (fetch) fork	git@github.com:gaol/gaol.github.io.git (push) origin	https://github.com/gaol/gaol.github.io (fetch) origin	https://github.com/gaol/gaol.github.io (push)   然后在 push 的时候使用：</description>
    </item>
    
    <item>
      <title>WildFly Notes</title>
      <link>https://gaol.github.io/zh-cn/posts/jboss-notes/</link>
      <pubDate>Wed, 25 Mar 2020 17:12:06 +0800</pubDate>
      
      <guid>https://gaol.github.io/zh-cn/posts/jboss-notes/</guid>
      <description>Table of Contents 配置数据库 配置数据库的 &amp;lt;connection-url&amp;gt;   集群 指定集群的 Node 名称   EJB EJB lookup   Arquillian Arquillian 针对 WildFly 的两种模式   JNDI Lookup JNDI binding     本文列出一些 WildFly 配置过程中的注意事项，会不停的更新：
   配置数据库 WildFly 的数据库使用 JCA 规范，在 Wildfly /subsystem=datasources/ 下。 推荐使用 DataSource 获取数据库连接，因为可以有更好的连接池和分布式事务的支持。
 配置数据库的 &amp;lt;connection-url&amp;gt; 很多时候系统管理员习惯使用老式的 connection-url 进行数据库配置，需要注意以下错误：
 Unexpected character &#39;=&#39; (code 61); expected a semi-colon   这是因为 &amp;amp; 要使用 &amp;amp; 来 escapse，否则 xml 解析就会以为这是个 entity，尝试去解析。</description>
    </item>
    
  </channel>
</rss>